プロジェクト仕様書: 画像認識格闘ゲーム "Pose Duel" (仮)
1. プロジェクト概要
コンセプト: プレイヤー自身の体の動き（ポーズ）をWebカメラでリアルタイムに認識し、そのポーズに応じて画面上のキャラクターが技を繰り出す対戦型格闘ゲーム。

プラットフォーム: Webブラウザ

対戦形式: ローカルマルチプレイ（1台のPC、1つのカメラで2人が対戦）

2. 主要技術スタック
バックエンド: Python, Flask, Flask-Sock (WebSocket), OpenCV, MediaPipe

フロントエンド: JavaScript, p5.js (描画/ゲームロジック), HTML5, CSS3

デプロイ: Git, Railway (またはHeroku), Gunicorn

3. 開発フェーズとタスク詳細
フェーズ1: 基礎技術の検証と環境構築 (期間: 2日間)
目標: プロジェクトで使用する各技術要素を個別に動作させ、開発の土台を固める。

タスクID	タスク名	使用技術	作業内容	完了条件
1.1	開発環境構築	Python, venv, Git	プロジェクト用のフォルダを作成し、Python仮想環境(venv)を構築。git initでGitリポジトリを作成する。	仮想環境が有効化され、.gitignoreファイルが設置されている。
1.2	骨格検出テスト	Python, OpenCV, MediaPipe	Webカメラを起動し、検出した人物の骨格ランドマークをコンソールに数値として出力するスクリプトを作成する。	スクリプト実行後、ターミナルに関節の座標(x, y, z)が連続して表示される。
1.3	Webサーバーテスト	Python, Flask	「Hello World」と表示するだけの最もシンプルなWebサーバーをFlaskで構築する。	flask run後、ブラウザでhttp://127.0.0.1:5000にアクセスし、「Hello World」が表示される。
1.4	ゲーム描画テスト	JavaScript, p5.js, HTML	HTMLファイルにp5.jsを読み込み、画面に円を描画する。キーボードの矢印キーでその円を動かせるようにする。	Webページを開くと円が表示され、キーボード操作に追従して動く。

Google スプレッドシートにエクスポート
フェーズ2: コア・パイプラインの構築 (期間: 3日間)
目標: バックエンドのポーズ認識とフロントエンドの描画をリアルタイムに連携させる。

タスクID	タスク名	使用技術	作業内容	完了条件
2.1	ポーズ判定ロジック実装	Python, MediaPipe	Task 1.2の座標データを基に、特定のポーズを判定する関数を実装。「PUNCH」「KICK」「GUARD」「IDLE」の4状態を文字列で返す。	骨格データを与えると、現在のポーズ名（例: "PUNCH"）が文字列として返される。
2.2	WebSocketサーバー実装	Python, Flask-Sock	Task 2.1で判定したポーズ名を、WebSocketを通じて接続してきたクライアントに毎フレーム送信する処理をFlaskサーバーに追加する。	サーバー起動後、テスト用クライアントで接続すると、ポーズ名の文字列がリアルタイムで受信できる。
2.3	WebSocketクライアント実装	JavaScript, WebSocket API	Task 1.4のp5.js側にWebSocketクライアントを実装し、Flaskサーバーから送られてくるポーズ名を受信する。	ブラウザのコンソールを開くと、サーバーから送られてくるポーズ名（"PUNCH"など）がリアルタイムで表示される。
2.4	描画へのリアルタイム反映	JavaScript, p5.js	受信したポーズ名に応じて、Task 1.4の円の色や形を変更する。	自分がパンチのポーズをすると円が赤くなり、ガードのポーズをすると青くなるなど、動きに描画が追従する。

Google スプレッドシートにエクスポート
フェーズ3: ゲームとしての肉付け (期間: 4日間)
目標: 単なる技術デモから、対戦ゲームとして遊べる状態へと昇華させる。

タスクID	タスク名	使用技術	作業内容	完了条件
3.1	キャラクター実装	p5.js	フリー素材の2Dキャラクター画像（スプライトシート）を用意し、円の代わりに表示。ポーズに応じて「待機」「攻撃」アニメーションを再生する。	ポーズに応じてキャラクターのアニメーションが切り替わる。
3.2	ローカル対戦ロジック	Python, MediaPipe	1つのカメラ映像から2人分の骨格を同時に検出し、画面上の左右位置でP1とP2に割り当てる。それぞれのポーズ情報をWebSocketで送信する。	WebSocketでP1とP2、それぞれのポーズ情報が { "p1_pose": "PUNCH", "p2_pose": "IDLE" } のようなJSON形式で送信される。
3.3	UI要素の実装	p5.js, HTML/CSS	プレイヤー名、HPバー、制限時間を画面に描画する。	ゲーム画面に体力ゲージとタイマーが表示され、静的に配置されている。
3.4	ゲームルールと勝敗判定	p5.js	ヒット判定（攻撃アニメーション中に相手キャラと重なったらダメージ）、HPの増減、タイマーのカウントダウン、タイムアップやKOによる勝敗判定ロジックを実装する。	一方のプレイヤーが攻撃を当てると、相手のHPバーが減る。HPが0になると「K.O.」と表示される。

Google スプレッドシートにエクスポート
フェーズ4: 仕上げと公開 (期間: 5日間)
目標: 作品を磨き上げ、インターネット上に公開し、誰でも遊べる状態にする。

タスクID	タスク名	使用技術	作業内容	完了条件
4.1	サウンド実装	p5.js (p5.sound)	フリー素材のBGMと効果音（パンチ、ダメージ、KO）を用意し、適切なタイミングで再生する。	攻撃時に打撃音が鳴り、決着がつくとファンファーレが流れる。
4.2	演出強化	p5.js, CSS	攻撃ヒット時の画面揺れやフラッシュ、KO時のスローモーションなど、ゲームを盛り上げる演出を追加する。	ヒット時のエフェクトが表示され、ゲームプレイの爽快感が増している。
4.3	デプロイ準備	Git, Gunicorn	requirements.txt（Pythonのライブラリリスト）とProcfile（起動コマンド設定ファイル）を作成する。	gunicorn app:appコマンドでローカルサーバーが問題なく起動する。
4.4	本番デプロイ	Railway, Git	Railwayにプロジェクトを作成し、GitHubリポジトリと連携してデプロイを実行。発生するエラーを解決する。	発行された公開URLにスマートフォンや別のPCからアクセスし、ゲームが問題なく動作する。
4.5	最終調整と発表準備	-	ゲームバランスの微調整（攻撃力、判定など）。プロジェクトの魅力を伝えるためのプレゼンテーション資料を作成し、デモの流れを練習する。	3分程度の持ち時間で、コンセプト説明と魅力的なデモができるようになっている。